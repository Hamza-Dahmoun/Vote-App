@model IList<WebApplication1.Models.ViewModels.CandidateViewModel>
@{
    ViewData["Title"] = "Index";
}
<style>
    
    .voting-container {
        display: flex;
        flex-direction: column;
        justify-content: center;
        width: 60%;
        margin: auto;
    }
    .candidate-container {
        border: 1px solid #e6e6e6;
        border-radius: 4px;
        text-align: center;
        cursor: pointer;
        transition-duration: 0.5s;
        min-height: 120px;
        margin-top: 2%;
        margin-bottom: 2%;
        display: flex;
        flex-direction: column;
        justify-content: center;
        padding:5px;
    }
    .candidate-container:hover {
        transition-duration: 0.5s;
        background-color: #3d7e9a;
        color: #fff;
        box-shadow:1px 1px 10px #3d7e9a;
    }
    .selected-candidate {
        background-color: #3d7e9a;
        color: #fff;
    }
    .candidate-name{
        font-size:25px;
    }
    .fa-check-circle-o{
        display:none;
    }
    #vote-button {
        margin-top:10px;
        display: none;
        color: #3d7e9a;
        background-color: #fff;
        height:35px;
        border:none;
        font-size:16px;
        margin-left:auto; margin-right:auto;
    }
</style>
<h1 class="text-center">Select your choice wisely</h1>
<br />
<div class="voting-container">


    @foreach (var candidate in Model)
    {
    <div class="candidate-container">
        <p class="hidden-candidateId" hidden>@candidate.Id</p>
        <p class="candidate-name"><i class="fa fa-check-circle-o" aria-hidden="true"></i> @candidate.FirstName @candidate.LastName</p>
        <p>@candidate.StructureLevel @candidate.StructureName</p>        
    </div>        
    }

    <button type="button" id="vote-button" title="Validate Vote">Validate my Vote</button>
</div>
<script>
    //add click event listener to candidate-container divs
    var maxSelection = 2;
    var selectedIdArray = new Array();
    var candidates = document.getElementsByClassName("candidate-container");
    for (let i = 0; i < candidates.length; i++) {
        candidates[i].addEventListener("click", clickCandidate);
    }
    //add click event to vote-button
    document.getElementById("vote-button").addEventListener("click", sendCandidates);
    function clickCandidate() {
        let newSelected;
        let selectedCandidateId;
        if (event.target.tagName == "DIV") {
            //alert("div is clicked");
            newSelected = event.target;
        }
        else {
            //alert("chlild is clicked");
            newSelected = event.target.parentNode;
        }
        selectedCandidateId = newSelected.querySelectorAll(".hidden-candidateId")[0].textContent;
        //alert("its id is: " + selectedCandidateId.textContent);

        if (isAlreadySelected(newSelected)) {
            //alert("it is already selected");
            removeSelection(newSelected, selectedCandidateId)
        }
        else {
            //alert("it is not already selected");
            //there are two cases, 1- whether user is selecting a new candidate within the five, so we'll add the css class and the id to the array
            //2- or he'is selecting more than 5, do nothing
            if (document.querySelectorAll(".selected-candidate").length < maxSelection) {
                addNewSelection(newSelected, selectedCandidateId)
            }
            else {
                //do nothing
            }

        }

        //now update data-attribute
        document.getElementById("vote-button").setAttribute("data-candidateId", selectedIdArray);
        //now display/hide the vote button
        displayHideVoteButton();        
    }
    function isAlreadySelected(candidateContainer) {
        if (candidateContainer.className.includes("selected-candidate"))
            return true;
        else return false;
    }
    function removeSelection(candidateContainer, selectedCandidateId) {
        candidateContainer.className = "candidate-container";
        //now lets remove its id from the array
        const index = selectedIdArray.indexOf(selectedCandidateId);
        if (index > -1) {
            selectedIdArray.splice(index, 1);
        }
        //now lets hide the check icon
        hideCheckIcon(candidateContainer);
    }

    function addNewSelection(newSelection, selectedCandidateId) {
        newSelection.classList.add("selected-candidate");
        selectedIdArray.push(selectedCandidateId);
        //now lets hide the check icon
        displayCheckIcon(newSelection);
    }

    function displayHideVoteButton() {
        if (selectedIdArray.length > 0) {
            document.getElementById("vote-button").style.display = "block";
        }
        else {
            document.getElementById("vote-button").style.display = "none";
        }
    }

    function displayCheckIcon(selectedCandidate) {
        selectedCandidate.querySelector(".fa-check-circle-o").style.display = "block";
    }

    function hideCheckIcon(selectedCandidate) {
        selectedCandidate.querySelector(".fa-check-circle-o").style.display = "none";
    }


    function sendCandidates() {
        //for (let i = 0; i < selectedIdArray.length; i++) {
        //    alert(selectedIdArray[i] + "  --  " + JSON.stringify(selectedIdArray),);
        //}
        
        //Send the JSON array to Controller using AJAX.
        $.ajax({
            type: "POST",
            url: "/Vote/ValidateVote",
            data: JSON.stringify(selectedIdArray),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            error: function () {
                console.log("error");
            },
            success: function (r) {
                console.log("success");
                window.location.href = "Home/Index";
            }
        });
    }

</script>


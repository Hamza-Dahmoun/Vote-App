@*WE LOAD AN EMPTY VIEW THEN IT GETS FILLED USING JQUERY AJAX*@
@model WebApplication1.Models.ViewModels.DashboardViewModel

    <style>
        .dashboard-holder {
            display: flex;
            flex-direction: row;
            justify-content: space-between;
        }

            .dashboard-holder h3 {
                margin-bottom: 3.5%;
            }

        .dashboard-right-side {
            display: flex;
            flex-direction: column;
            justify-content: center;
            max-width: 280px;
            min-width: 280px;
            align-self: start;
        }

        .dashboard-left-side {
            display: flex;
            flex-direction: column;
            justify-content: center;
            border-right: 1px solid #e6e6e6;
            padding-right: 3%;
            /*border: 1px solid black;*/
        }

        .margined-area {
            margin-top: 10%;
            margin-bottom: 10%;
        }

        .dashboard-item-container {
            text-align: center;
            font-size: 25px;
            border: 1px solid #e6e6e6;
            border-radius: 5px;
            padding: 5%;
            margin: 3%;
        }

            .dashboard-item-container i {
                font-size: 250%;
            }


        #coming-elections-area .spinner-border {
            display: none;
        }

        #coming-elections-area .table {
            display: none;
        }




        .animated-button {
            font-size: 110%;
            animation-name: background-switch;
            animation-duration: 3.5s;
            animation-iteration-count: infinite;
            animation-direction: alternate;
            /*the above line makes the transition between one animation and its next smooth*/
        }

        @@keyframes background-switch {
            from {
                background-color: #212529;
                color: white;
            }

            to {
                background-color: white;
                color: #212529;
            }
        }




        /********************* RESULTS CONTAINER STYLING **************/
        #election-results-container {
            display: flex;
            flex-direction: column;
            justify-content: center;
            text-align: center;
            color: #3d7e9a;
            /*overflow-y: scroll;*/
            height: 100vh;
            width: 35%;
            border-right: 1px solid #3d7e9a;
            position: fixed;
            top: 0;
            z-index: 10;
            background-color: #fff;
            /*left: -120%;*/
            /*animation-name: move_filterscontainer_right;
            animation-duration: 0.5s;
            animation-fill-mode: forwards;*/
            /*so that this class will keep the styling specified in the step 100% of the animation*/
        }

        .one-result-container {
            text-align: center;
            font-size: 20px;
            display: flex;
            flex-direction: row;
            justify-content: center;
            align-items: center; /*in order to vertically center the cup icon*/
            width: 50%;
            margin-left: auto;
            margin-right: auto;
            margin-top: 1%;
            margin-bottom: 1%;
        }

            .one-result-container .rank-container {
                min-width: 50px;
            }

            .one-result-container .candidate-data-container {
                width: 250px;
            }

                .one-result-container .candidate-data-container p {
                    margin-bottom: 0%;
                    margin-top: 0%;
                }

            .one-result-container span {
                font-size: 250%;
            }



        @@keyframes move_filterscontainer_right {
            0% {
                left: -120%;
            }

            20% {
                left: -80%;
            }

            40% {
                left: -60%;
            }

            60% {
                left: -40%;
            }

            80% {
                left: -20%;
            }

            100% {
                left: 0%;
            }
        }

        @@keyframes move_filterscontainer_left {
            0% {
                left: 0%;
            }

            20% {
                left: -20%;
            }

            40% {
                left: -40%;
            }

            60% {
                left: -60%;
            }

            80% {
                left: -80%;
            }

            100% {
                left: -120%;
            }
        }

        .displayed_results_container {
            display: block;
            animation-name: move_filterscontainer_right;
            animation-duration: 0.5s;
            animation-fill-mode: forwards;
        }

        .hidden_results_container {            
            animation-name: move_filterscontainer_left;
            animation-duration: 0.5s;
            animation-fill-mode: forwards;
        }
    </style>


<br />
<h1 class="margins text-center">Welcome to Voting App</h1>
<hr />
<br />
<div class="dashboard-holder">
    <div class="dashboard-left-side">
        <div id="current-election-area">
            <h3>Current Election</h3>
            <div class="spinner-border">

            </div>
        </div>

        <div class="margined-area" id="coming-elections-area">
            <h3>Future Elections</h3>
            <div class="spinner-border">

            </div>
            <table class="table">
                <thead>
                    <tr>
                        <th>
                            Name
                        </th>
                        <th>
                            StartDate
                        </th>
                        <th>
                            Duration (days)
                        </th>
                        <th>
                            Number of Candidates
                        </th>
                    </tr>
                </thead>
                <tbody>
                </tbody>
            </table>
        </div>

        <div class="margined-area" id="previous-elections-area">
            <h3>Previous Elections</h3>
            <div class="spinner-border">

            </div>
            <table class="table">
                <thead>
                    <tr>
                        <th>
                            Name
                        </th>
                        <th>
                            StartDate
                        </th>
                        <th>
                            Duration (days)
                        </th>
                        <th>
                            Number of Candidates
                        </th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                </tbody>
            </table>
        </div>
    </div>
    <div class="dashboard-right-side">
        <h2 class="text-center">Statistics</h2>
        <hr />
        <div class="dashboard-item-container">
            <i class="fa fa-university" aria-hidden="true"></i>
            <p>@Model.NbElections Elections</p>
        </div>
        <div class="dashboard-item-container">
            <i class="fa fa-id-card-o" aria-hidden="true"></i>
            <p>@Model.NbCandidates Candidates</p>
        </div>
        <div class="dashboard-item-container">
            <i class="fa fa-users" aria-hidden="true"></i>
            <p>@Model.NbVoters Voters</p>
        </div>
        <div class="dashboard-item-container">
            <i class="fa fa-envelope" aria-hidden="true"></i>
            <p>@Model.NbVotes Votes</p>
        </div>
    </div>
</div>
<br/>
<br/>
<div id="election-results-container" class="hidden_results_container"></div>






<script>
    //Start loading things once the page is ready
    document.addEventListener("DOMContentLoaded", loadElectionsData);



    function loadElectionsData() {
        //1- Load Coming Elections, hide table and display spinner
        let comingElectionsArea = document.getElementById("coming-elections-area");
        displayElement(comingElectionsArea.querySelector(".spinner-border"));
        hideElement(comingElectionsArea.querySelector(".table"));
        loadComingElections();


        //2- Load Previous Elections
        let previousElectionsArea = document.getElementById("previous-elections-area");
        displayElement(previousElectionsArea.querySelector(".spinner-border"));
        hideElement(previousElectionsArea.querySelector(".table"));
        loadPreviousElections();


        //3- Load Current Election
        let currentElectionArea = document.getElementById("current-election-area");
        displayElement(currentElectionArea.querySelector(".spinner-border"));
        loadCurrentElection();
    }




    function loadComingElections() {
        //this function load a list of coming elections using jQuery ajax

    $.ajax({
        type: "POST",
        url: "/Election/GetComingElections",
        /*data: JSON.stringify(document.getElementById("candidate-id-holder").value),*/
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        error: function () {
            alert("error");
        },
        success: function (response) {
            //'response' represents the object returned from the api which is a list of future elections
            console.log(response);
            //console.log(response.length);
            displayComingElections(response);

            //window.location.href = "Home/Index";
        }
    });

    }
    function displayComingElections(comingElections) {
        let comingElectionsArea = document.getElementById("coming-elections-area");
        let table = comingElectionsArea.querySelector(".table");

        let tableBody = table.querySelector("tbody");

        for (let i = 0; i < comingElections.length; i++) {

            let tdName = document.createElement("td");
            tdName.innerText = comingElections[i].Name;

            let tdStartDate = document.createElement("td");
            tdStartDate.innerText = comingElections[i].StartDate;

            let tdDurationInDays = document.createElement("td");
            tdDurationInDays.innerText = comingElections[i].DurationInDays;

            let tdCandidatesCount = document.createElement("td");
            tdCandidatesCount.innerText = comingElections[i].Count;

            let electionRow = document.createElement("tr");
            electionRow.appendChild(tdName);
            electionRow.appendChild(tdStartDate);
            electionRow.appendChild(tdDurationInDays);
            electionRow.appendChild(tdCandidatesCount);

            tableBody.appendChild(electionRow);
        }


        //now lets display the tabl and hide the spinner
        hideElement(comingElectionsArea.querySelector(".spinner-border"));
        displayElement(table);
    }



    function loadCurrentElection() {
         //this function load the current election using jQuery ajax

    $.ajax({
        type: "POST",
        url: "/Election/GetCurrentElection",
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        error: function () {
            alert("error");
        },
        success: function (response) {
            //'response' represents the object returned from the api which is the current election
            console.log(response);
            //console.log(response.length);
            displayCurrentElection(response);

            //window.location.href = "Home/Index";
        }
    });
    }
    function displayCurrentElection(currentElection) {
        //console.log(currentElection);

        let currentElectionArea = document.getElementById("current-election-area");
        hideElement(currentElectionArea.querySelector(".spinner-border"));

        if (currentElection == null) {
            //so there is no current election, lets just display a simple text
            let p = document.createElement("p");
            p.innerText = "There is no Election currently!";
            currentElectionArea.appendChild(p);
        }
        else {
            //so there is an election currently, lets display its info with a 'Vote' button
            let name = document.createElement("p");
            name.innerText = "Name: ";
            let strongName = document.createElement("strong");
            strongName.innerText = currentElection.Name + " | " + currentElection.CandidatesCount + " Candidates";
            name.appendChild(strongName);

            let startdate = document.createElement("p");
            startdate.innerText = "Date: ";
            let strongDate = document.createElement("strong");
            strongDate.innerText = currentElection.StartDate;
            startdate.appendChild(strongDate);

            let durationindays = document.createElement("p");
            durationindays.innerText = "Duration (days): ";
            let strongDuration = document.createElement("strong");
            strongDuration.innerText = currentElection.DurationInDays;
            durationindays.appendChild(strongDuration);

            let participationRate = document.createElement("p");
            participationRate.innerText = "Participation Rate: ";
            let strongParticipationRate = document.createElement("strong");
            strongParticipationRate.innerText = Math.floor(parseFloat(currentElection.ParticipationRate*100)) + "%";
            participationRate.appendChild(strongParticipationRate);

            currentElectionArea.appendChild(name);
            currentElectionArea.appendChild(startdate);
            currentElectionArea.appendChild(durationindays);
            currentElectionArea.appendChild(participationRate);


            //lets now display the Vote button only if he hasnt voted yet
            //else, we'll display 'Results' button
            if (!currentElection.HasUserVoted) {
                let voteButton = document.createElement("a");
                voteButton.className = "btn btn-default animated-button";
                voteButton.setAttribute("title", "Go Vote");
                //voteButton.setAttribute("href", "Vote/Index/" + currentElection.Id);
                //currentElectionId in Vote/Index() was always received as empty Guid .. lets just get the current election inside the Index() action
                voteButton.setAttribute("href", "/Vote/Index/");
                let icon = document.createElement("i");
                icon.className = "fa fa-chevron-right";
                icon.innerText = "Vote";
                voteButton.appendChild(icon);
                currentElectionArea.appendChild(voteButton);
            }
            else {
                let resultsButton = document.createElement("a");
                resultsButton.setAttribute("electionId", currentElection.Id);
                resultsButton.style.color = "#3d7e9a";
                resultsButton.style.cursor = "pointer";
                resultsButton.setAttribute("title", "Show Details");
                resultsButton.innerText = "Show Results";
                resultsButton.addEventListener("click", getElectionResults);
                let div = document.createElement("div");
                div.appendChild(resultsButton);
                let spinner = document.createElement("div");
                spinner.className = "spinner-border";
                spinner.setAttribute("Id", "current-election-results-spinner");
                spinner.style.display = "none";
                div.appendChild(spinner);
                currentElectionArea.appendChild(div);
            }

        }
    }





    function loadPreviousElections() {
        //this function load a list of previous elections using jQuery ajax

    $.ajax({
        type: "POST",
        url: "/Election/GetPreviousElections",
        /*data: JSON.stringify(document.getElementById("candidate-id-holder").value),*/
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        error: function () {
            alert("error");
        },
        success: function (response) {
            //'response' represents the object returned from the api which is a list of previous elections
            console.log(response);
            //console.log(response.length);
            displayPreviousElections(response);

            //window.location.href = "Home/Index";
        }
    });

    }
    function displayPreviousElections(previousElections) {
        //console.log(previousElections);

        let previousElectionsArea = document.getElementById("previous-elections-area");
        let table = previousElectionsArea.querySelector(".table");

        let tableBody = table.querySelector("tbody");

        for (let i = 0; i < previousElections.length; i++) {

            let tdName = document.createElement("td");
            tdName.innerText = previousElections[i].Name;

            let tdStartDate = document.createElement("td");
            tdStartDate.innerText = previousElections[i].StartDate;

            let tdDurationInDays = document.createElement("td");
            tdDurationInDays.innerText = previousElections[i].DurationInDays;

            let tdCandidatesCount = document.createElement("td");
            tdCandidatesCount.innerText = previousElections[i].CandidatesCount;

            let resultsButton = document.createElement("a");
            resultsButton.setAttribute("electionId", previousElections[i].Id);
            resultsButton.style.color = "#3d7e9a";
            resultsButton.style.cursor = "pointer";
            resultsButton.setAttribute("title", "Show Details");
            resultsButton.innerText = "Show Results";
            resultsButton.addEventListener("click", getElectionResults);
            let tdResultsButton_andSpinner = document.createElement("td");
            tdResultsButton_andSpinner.appendChild(resultsButton);
            let spinner = document.createElement("span");
            spinner.className = "spinner-border";
            spinner.style.display = "none";
            tdResultsButton_andSpinner.appendChild(spinner);

            let electionRow = document.createElement("tr");
            electionRow.appendChild(tdName);
            electionRow.appendChild(tdStartDate);
            electionRow.appendChild(tdDurationInDays);
            electionRow.appendChild(tdCandidatesCount);
            electionRow.appendChild(tdResultsButton_andSpinner);
            

            tableBody.appendChild(electionRow);
        }


        //now lets display the tabl and hide the spinner
        hideElement(previousElectionsArea.querySelector(".spinner-border"));
        displayElement(table);
    }
    







    function displayElement(elt) {
        //this function displays an element
        elt.style.display = "block";
    }
    function hideElement(elt) {
        //this function hides an element
        elt.style.display = "none";
    }





    /*THE BELOW METHODS ARE ALWAYS USED TO GET THE RESULTS OF A GIVEN ELECTION AND WRITHE THEM AND DISPLAY THEM IN A SLIDING DIV
    THEY ARE USED WHEN LOADING: 1- CURRENT ELECTION RESULTS 2- PREVIOUS ELECTIONS RESULTS*/
    function getElectionResults(event) {
        //console.log(event.target.getAttribute("electionId"));

        //lets hide the button and display the spinner
        //displayElement(document.getElementById("current-election-results-spinner"));
        console.log(event);
        console.log(event.target);
        displayElement(event.target.parentElement.querySelector(".spinner-border"));
        hideElement(event.target);
        //this function load the current election results using jQuery ajax
        $.ajax({
            type: "POST",
            url: "/Home/GetResultsOfElection",
            data: JSON.stringify(event.target.getAttribute("electionId")),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            error: function () {
                alert("error");
            },
            success: function (response) {
                //'response' represents the object returned from the api which is the an array of candodates ordered by their number of votes
                console.log(response);
                //lets hide the spinner and display the button
                //hideElement(document.getElementById("current-election-results-spinner"));
                hideElement(event.target.parentElement.querySelector(".spinner-border"));
                displayElement(event.target);
                //lets display the results
                displayElectionResults(response);
            }
        });
    }
    function displayElectionResults(response) {
        console.log(response);
        //this method takes a candidates list ordered by their number of votes (results of a given election)
        //and displays them in a div that will slide into the screen from the right side        

        let electionResultsContainer = document.getElementById("election-results-container");
        //lets erase previous results elements if there are any
        electionResultsContainer.innerHTML = "";

        //lets add 'hide button'
        let hideButton = document.createElement("span");
        hideButton.addEventListener("click", hideElectionResultsContainer);
        hideButton.innerText = "Hide Results";
        hideButton.style.textAlign = "left";
        hideButton.style.marginBottom = "50px";
        hideButton.style.marginLeft = "10px";
        hideButton.style.cursor = "pointer";
        hideButton.style.textDecoration = "underline";
        hideButton.style.color = "#000";
        electionResultsContainer.appendChild(hideButton);

        if (response == null || response.length == 0) {
            //so the respponse is empty, lets just display a text  to tell user that this election has no candidates
            let para = document.createElement("p");
            para.innerText = "It seems this election had no Candidates!";
            para.style.textAlign = "center";
            electionResultsContainer.appendChild(para);
        }
        else {

            for (let i = 0; i < response.length; i++) {
                let one_result_container = document.createElement("div");
                one_result_container.className = "one-result-container";

                let rank_container = document.createElement("div");
                rank_container.className = "rank-container";

                if (i == 0) {
                    //so its the current winner candidate
                    let icon = document.createElement("i");
                    icon.className = "fa fa-trophy";
                    let span = document.createElement("span");
                    span.appendChild(icon);
                    rank_container.appendChild(span);
                }
                else {
                    let span = document.createElement("span");
                    span.innerText = i + 1;
                    rank_container.appendChild(span);
                }
                one_result_container.appendChild(rank_container);

                let candidate_data_container = document.createElement("div");
                candidate_data_container.className = "candidate-data-container";
                let candidateName = document.createElement("p");
                candidateName.innerText = response[i].FirstName + " " + response[i].LastName;
                candidate_data_container.appendChild(candidateName);
                let votesCount = document.createElement("p");
                votesCount.innerText = response[i].VotesCount;
                candidate_data_container.appendChild(votesCount);
                one_result_container.appendChild(candidate_data_container);


                //let results_container = document.getElementById("results-container");
                electionResultsContainer.appendChild(one_result_container);
            }

        }



        electionResultsContainer.className = "displayed_results_container";

        //now lets add a click event to the document so that it also hide the results ... we'll remove the click event once the results are hidden
        document.addEventListener("click", hideElectionResultsContainer);

    }
    function hideElectionResultsContainer() {
        let electionResultsContainer = document.getElementById("election-results-container");
        electionResultsContainer.className = "hidden_results_container";

        //lets remove the click event off the document
        document.removeEventListener("click", hideElectionResultsContainer);
    }

</script>














<!--


    THIS IS THE OLD DASHBOARD USED BEFORE INTRODUCING THE ELECTION NOTION




    @*@model WebApplication1.Models.ViewModels.DashboardViewModel
@{
    ViewData["Title"] = "Home Page";
}*@


@*LETS LOAD THE CSS OF THE DASHBOARD*@
<partial name="_dashboardStyle"/>
<h1 class="margins">Welcome to Voting App</h1>
<hr />

    @*@if (!@Model.UserHasVoted)
    {
        <div id="vote-button-container">
            <a class="btn btn-default" asp-controller="Vote" asp-action="Index" asp-route-currentElectionId="@Model.CurrentElectionId" title="Go Vote">
                Vote <i class="fa fa-chevron-right" aria-hidden="true"></i>
            </a>
        </div>
    }
    else
    {
        int i = 0;
        <div id="results-container" class="margins">
            <h3 class="margins">Updated Results</h3>

            @foreach (var candidate in Model.Candidates)
            {
                i++;
                //so it is the first candidate, lets add the cup icon to it
                <div class="one-result-container">
                    <div class="rank-container">
                        @if (i == 1)
                        {
                            <span><i class="fa fa-trophy" aria-hidden="true"></i></span>
                        }
                        else
                        {
                            <span>@i.ToString()</span>
                        }

                    </div>
                    <div class="candidate-data-container">
                        <p>@candidate.FirstName @candidate.LastName</p>
                        <p>@candidate.VotesCount Votes</p>
                    </div>
                </div>
            }
        </div>
    }*@



<div id="dashboard-container" class="margins">
    <div class="dashboard-item-container">
        <i class="fa fa-user" aria-hidden="true"></i>
        <p>@*@Model.NbCandidates Candidates*@</p>
    </div>
    <div class="dashboard-item-container">
        <i class="fa fa-users" aria-hidden="true"></i>
        <p>@*@Model.NbVoters Voters*@</p>
    </div>
    <div class="dashboard-item-container">
        <i class="fa fa-envelope" aria-hidden="true"></i>
        <p>@*@Model.NbVotes Votes*@</p>
    </div>
    <div class="dashboard-item-container">
        <i class="fa fa-pie-chart" aria-hidden="true"></i>
        <p>@*@Model.ParticipationRate.ToString("F2") %*@</p>
    </div>
</div>
-->
